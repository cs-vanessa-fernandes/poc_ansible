---
- name: Criando VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}"
    state: "present"
    resource_tags: { "Environment":"Ansible" }
  args:
    tags: { Name: "{{ ec2_name }}", Ansible: "Yes" }
  register: poc_ansible

- name: Definindo VPC ID na variável
  set_fact:
    vpc_id: "{{ poc_ansible.vpc.id }}"

- name: "Provisionando VPC na região {{ aws_region }}"
  local_action:
    module: ec2_vpc
    state: present
    cidr_block: 10.1.0.0/16
    resource_tags: { "Environment":"Ansible" }
    subnets:
      - cidr: 10.1.1.0/24
        az: "{{ aws_zone }}"
    internet_gateway: True
    route_tables:
      - subnets:
          - 10.1.1.0/24
        routes:
          - dest: 0.0.0.0/0
            gw: igw
    region: "{{ aws_region }}"
    wait: yes 
  register: vpc

- name: Criando Security Group
  ec2_group:
    name: "{{ security_group }}"
    description: Security group para poc de ansible
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ cidr_ip }}"
#      - proto: tcp
#        from_port: 80
#        to_port: 80
#        cidr_ip: "{{ cidr_ip }}"
#      - proto: tcp
#        from_port: 80
#        to_port: 80
#        group_id: "{{ group_id }}"
#      - proto: tcp
#        from_port: 8080
#        to_port: 8080
#        cidr_ip: "{{ cidr_ip }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: aws_sg

- name:  Debug aws_sg
  debug:
    msg: "{{ aws_sg }}"

- name: Adicionando tags
  local_action:
   module: ec2_tag
   resource: "{{ group_id}}"
   region: "{{ aws_region }}"
   state: present
   tags:
     Name: "{{ vpc_name }}"

#- name: Tag the security group with a name
#  local_action:
#    module: ec2_tag
#    resource: "{{aws_sg.group_id}}"
#    region: "{{ aws_region }}"
#    state: present
#    tags:
#      Name: "ansible"
#      Ansible: "Yes" 

- name: Criando instancia AWS EC2
  become: false
  ec2:
    key_name: redeteste
    group: "{{ security_group }}"
    instance_type: "{{aws_instanceType}}"
    id: "{{ aws_region }}.{{ aws_instanceType }}.poc2"
    image: "{{aws_base_amis}}"
    ec2_url: "{{ aws_zone }}.amazonaws.com"
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    wait: yes
    count: 1
    assign_public_ip: yes
  register: ec2_instances

- add_host: name={{ item.public_ip }}
            groups=ec2_hosts
            ansible_user=ubuntu
            instance_name={{ item.public_ip }}
  with_items:
            - "{{ec2_instances.instances}}"

- name: debug groups
  debug: var=groups

- name: Adicionando Tags a instancia
  become: false
  ec2_tag: resource={{item.id}} region={{aws_region}}
  args:
    tags: { Name: "{{ec2_name}}", Ansible: "Yes" }
  with_items:
    - "{{ec2_instances.instances}}"

- name: Aguardando SSH ec2_instances_zones
  wait_for: host={{item.public_ip}} port=22 delay=2 timeout=320 state=started
  with_items:
    - "{{ec2_instances.instances}}"

- name: Installing python zones
  delegate_to: "{{item.public_ip}}"
  raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)
  with_items:
    - "{{ec2_instances.instances}}"

#- meta: refresh_inventory

#- name: Criando instancia EC2 
#  ec2:
#    region: "{{ aws_region }}"
#    key_name: redeteste
#    instance_type: "{{ aws_instanceType }}"
#    image: "{{ aws_base_amis }}"
#    wait: yes
#    group: "{{ security_group }}"
#    count: "{{ count }}"
#    vpc_subnet_id: "{{ subnet }}"
#    assign_public_ip: '{{ public_ip }}'
#    private_ip: "{{ private_ip }}"
#    state: present
#    instance_tags:
#      Name: poc_ansible
#  register: ec2

#- name: Alocar EIP
#  ec2_eip: 
#    instance_id: "{{ item.id }}"
#    region: "{{ aws_region }}"
#  with_items: 
#    - '{{ ec2.instances }}'
#
#- name: Adicionar instancia ao host group
#  add_host: 
#    hostname: "{{ item[0].private_ip }}"
#    ec2_tag_Name: "{{ item[1] }}"
#    groupname: launched
#  with_together:
#    - '{ ec2.instances }'
#    - '{{ instances }}'
#
#- name: teste
#  debug:
#    msg:  "{{ ec2.instances}}"
#
#
#
